{"cells":[{"cell_type":"markdown","metadata":{"id":"gQ6c1Mj50zGg"},"source":["# Central Limit Theorem"]},{"cell_type":"markdown","metadata":{"id":"FnMPwGLE0zGi"},"source":["Sources: \n","\n","* \"Naked statistics\" by  Charles J. Wheelan"]},{"cell_type":"markdown","metadata":{"id":"9tKBp_vh0zGj"},"source":["**A core principle underlying the central limit theorem is that a large, properly drawn sample will resemble the population from which it is drawn.**"]},{"cell_type":"markdown","metadata":{"id":"bg6CaGiS0zGj"},"source":["The central limit theorem enables us to make the following inferences: \n","\n","* If we have detailed information about some population, then we can make inferences about any properly drawn sample from that population. \n","* If we have detailed information about a properly drawn sample (mean and standard deviation), we can make accurate inferences about the population from which that sample was drawn. The central limit tells us that a large sample will not typically deviate  a lot from its population.\n","* The central limit theorem allows us to calculate the probability that a particular sample was drawn from a given population. If that probability is low, then we  can conclude with a high degree of confidence that the sample was not drown from the population in question.\n","* If we know the underlying characteristics of two samples, we can infer whether or not both samples were likley drawn from the same population."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qBfSSRjJ0zGk"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import scipy.stats as stats\n","import random\n","import matplotlib.pyplot as plt"]},{"cell_type":"markdown","source":["## Looking at the CLT with simulated data"],"metadata":{"id":"nIM1MyKbQP93"}},{"cell_type":"markdown","metadata":{"id":"vVFdjMIb0zGk"},"source":["### The normal distribution\n","\n","It is a theoretical distribution defined by mathematical properties.\n","\n","It is a bell shaped-shaped distribution in which:\n","* 68 percent of the observations lie within one standard deviation of the mean\n","* 95 percent lies within two standard deviations\n","\n","We can simulate the normal distribution by generating numbers with `stats.norm.rvs`."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"kXXQqwrv0zGk","executionInfo":{"status":"ok","timestamp":1676715436032,"user_tz":-60,"elapsed":747,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"b67e6053-6cda-4e07-ba0d-86f0494ae73a"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["norm_dist = stats.norm.rvs(loc=0, \n","                           scale=1, \n","                           size=100000,\n","                           random_state=123\n","                          )\n","norm_dist = pd.Series(norm_dist)\n","norm_dist.hist(bins=30);"]},{"cell_type":"markdown","source":["#### Percentage of the simulated data that falls between the standard deviations#"],"metadata":{"id":"P_sTwrH3ypd6"}},{"cell_type":"markdown","source":["Mean of the normal distribution"],"metadata":{"id":"FCRQsdr3y8Y0"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"axMYA9ai0zGl","executionInfo":{"status":"ok","timestamp":1676715441983,"user_tz":-60,"elapsed":283,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"dc57e65e-3bad-4a1a-f00b-b60cd0f807a4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.0013148201751476637"]},"metadata":{},"execution_count":3}],"source":["mean_norm = np.mean(norm_dist)\n","mean_norm"]},{"cell_type":"markdown","source":["Standard deviation of the normal distribution"],"metadata":{"id":"jBn-f1MFzCl9"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OJa1VTU70zGl","executionInfo":{"status":"ok","timestamp":1676715443811,"user_tz":-60,"elapsed":12,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"893fbed0-3a90-4c8b-8851-a6d9db10daa9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9995701769427331"]},"metadata":{},"execution_count":4}],"source":["std_norm = np.std(norm_dist)\n","std_norm"]},{"cell_type":"markdown","source":["Our lower boundary for 68% of the data - mean minus the standard deviation"],"metadata":{"id":"1PhZToNgzIAu"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rt0VY26x0zGm","executionInfo":{"status":"ok","timestamp":1676715587706,"user_tz":-60,"elapsed":243,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"2f578087-dfef-4cc8-f253-24c3dc4fbed5"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["-0.9982553567675855"]},"metadata":{},"execution_count":9}],"source":["#find out the -1 standard deviation\n","sigma_negative = mean_norm - std_norm\n","sigma_negative"]},{"cell_type":"code","source":["#find out the -2 standard deviation\n","sigma_negative2 = mean_norm - 2*std_norm\n","sigma_negative2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"suw32TAeCJtp","executionInfo":{"status":"ok","timestamp":1676715589262,"user_tz":-60,"elapsed":272,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"fdf1fa98-87ea-4d71-c233-25c333adc565"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-1.9978255337103186"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["Our upper boundary for 68% of the data - mean plus the standard deviation"],"metadata":{"id":"7cjx96FHzQWa"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"EcTn8OqH0zGm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1676715591596,"user_tz":-60,"elapsed":231,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"8034d815-61b5-4597-b0ec-3d3078a269e3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0008849971178808"]},"metadata":{},"execution_count":11}],"source":["# find out the +1 standard deviation\n","sigma_positive = mean_norm + std_norm\n","sigma_positive"]},{"cell_type":"code","source":["# find out the +2 standard deviation\n","sigma_positive2 = mean_norm + 2*std_norm\n","sigma_positive2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pi1NpWySCOOi","executionInfo":{"status":"ok","timestamp":1676715658750,"user_tz":-60,"elapsed":233,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"13df347c-5a3a-41c9-c108-637ac6980a66"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2.000455174060614"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","source":["Plotting our boundaries on our simulated data\n","* red lines are one standard deviation - our boundaries for 68% of the data\n","* green lines are two standard deviations - our boundaries for 95% of the data"],"metadata":{"id":"TmQgvuGfzlMl"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"xbnyytsL0zGn","colab":{"base_uri":"https://localhost:8080/","height":281},"executionInfo":{"status":"ok","timestamp":1676715662261,"user_tz":-60,"elapsed":1016,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"35aa73a3-302d-4e4a-afa9-7b01a5d2db7b"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# plot the normal distribution\n","plt.hist(norm_dist, bins=30)\n","\n","# represent the -1 standard deviation\n","plt.axvline(sigma_negative, color = 'r')\n","plt.axvline(sigma_negative2, color = 'g')\n","\n","# represent the 1 standard deviation\n","plt.axvline(sigma_positive, color = 'r')\n","plt.axvline(sigma_positive2, color = 'g')\n","\n","plt.title('Representing a normal distribution')\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"E6B0_lAH0zGn"},"source":["What proportion of our `norm_dist` falls within 1 standard deviation from the mean?"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"T3UE523V0zGn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1676715932926,"user_tz":-60,"elapsed":219,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"29a02806-bac2-4a41-ce1a-ec3f530a9ce5"},"outputs":[{"output_type":"stream","name":"stdout","text":["68.1% lies within one standard deviation of the mean\n"]}],"source":["sigma_plus = len(norm_dist[(norm_dist > sigma_negative) \n","                          &(norm_dist < sigma_positive)])\n","\n","perc_1_std = sigma_plus/len(norm_dist)\n","\n","print(f\"{round(perc_1_std * 100, 2)}% lies within one standard deviation of the mean\")"]},{"cell_type":"markdown","source":["What proportion of our `norm_dist` falls beyond 1 standard deviation from the mean?"],"metadata":{"id":"TKDJzC5yTre9"}},{"cell_type":"code","source":["sigma_plus_inverted = len(norm_dist[(norm_dist < sigma_negative) \n","                                   |(norm_dist > sigma_positive)])\n","\n","out_1_std = sigma_plus_inverted / len(norm_dist)\n","\n","print(f\"{round(out_1_std * 100, 2)}% falls outside of one standard deviation of the mean\")"],"metadata":{"id":"cZb6qvCUTng0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1676715680956,"user_tz":-60,"elapsed":297,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"b43b44de-a361-4477-b90b-c415f4691379"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["31.9% falls outside of one standard deviation of the mean\n"]}]},{"cell_type":"markdown","metadata":{"id":"RRB48gZm0zGo"},"source":["##### **Exercise 1:** \n","\n","What proportion of our `norm_dist` falls beyond two standard deviations of the mean? And beyond three?"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Low15WOy0zGo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1676715750130,"user_tz":-60,"elapsed":392,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"5fb0d436-2ab6-43e8-ad19-cdae14f14fbf"},"outputs":[{"output_type":"stream","name":"stdout","text":["4.46% falls outside of one standard deviation of the mean\n"]}],"source":["#norm_dist falls beyond two standard deviations of the mean\n","sigma_plus_inverted = len(norm_dist[(norm_dist < sigma_negative2) \n","                                   |(norm_dist > sigma_positive2)])\n","\n","out_1_std = sigma_plus_inverted / len(norm_dist)\n","\n","print(f\"{round(out_1_std * 100, 2)}% falls outside of one standard deviation of the mean\")"]},{"cell_type":"code","source":["#norm_dist falls within two standard deviations of the mean\n","sigma_plus_inverted = len(norm_dist[(norm_dist > sigma_negative2) \n","                                   &(norm_dist < sigma_positive2)])\n","\n","out_1_std = sigma_plus_inverted / len(norm_dist)\n","\n","print(f\"{round(out_1_std * 100, 2)}% falls outside of one standard deviation of the mean\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7lPIpfx4DACu","executionInfo":{"status":"ok","timestamp":1676715824213,"user_tz":-60,"elapsed":501,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"578319de-10ea-4f0b-a591-4000e9c675bb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["95.54% falls outside of one standard deviation of the mean\n"]}]},{"cell_type":"markdown","metadata":{"id":"NY1B7dcE0zGr"},"source":["## Looking at the CLT with an actual population\n","\n","Let's move from theoretical distributions to real populations. We generally do not have access to a whole population: we only have access to samples. We use these samples to make guesses about the population. In this exercise we _do_ have access to the population so that we can prove how to make those guesses, and how accurate they can be."]},{"cell_type":"markdown","metadata":{"id":"8qZkRv060zGr"},"source":["Here's the distribution of our population, feel free to make up a story for the numbers"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"o8MZRYem0zGr","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1676716030430,"user_tz":-60,"elapsed":1129,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"34a732bb-6b19-4545-bafa-17d9bfb6fb98"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["          0\n","0  1.160131\n","1  0.222175\n","2  3.101406\n","3  0.758150\n","4  2.159439"],"text/html":["\n","  <div id=\"df-a085c239-e930-4736-ad56-a133911ab716\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.160131</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.222175</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3.101406</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.758150</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.159439</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a085c239-e930-4736-ad56-a133911ab716')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a085c239-e930-4736-ad56-a133911ab716 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a085c239-e930-4736-ad56-a133911ab716');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":28}],"source":["# population.csv\n","url = 'https://drive.google.com/file/d/1jomahr4JUPi8lAO33_RB1I-1089feWg2/view?usp=sharing' \n","path = 'https://drive.google.com/uc?export=download&id='+url.split('/')[-2]\n","pop = pd.read_csv(path)\n","\n","pop.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ulO__Uhf0zGr","colab":{"base_uri":"https://localhost:8080/","height":607},"executionInfo":{"status":"ok","timestamp":1676716092699,"user_tz":-60,"elapsed":695,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"abbd2cc8-d75f-42b7-e751-e8fc1795dc3f"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x720 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["pop.hist(bins=50, grid=False, color=\"#007398\", figsize=(20,10));\n","plt.axvline(float(pop.mean()), linestyle=\"--\", color=\"#f8485e\");"]},{"cell_type":"markdown","source":["Population mean:"],"metadata":{"id":"EysaEVuo5T0X"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"FlAFDJYN0zGr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1676716157295,"user_tz":-60,"elapsed":302,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"19c57c22-1188-4f42-93ca-d1a7bc8e0cc1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    3.387146\n","dtype: float64"]},"metadata":{},"execution_count":32}],"source":["pop_mean = pop.mean()\n","pop_mean"]},{"cell_type":"markdown","source":["Population Standard Deviation"],"metadata":{"id":"GgMxl8gZ5X1z"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"HVV9WKmh0zGr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1676716170354,"user_tz":-60,"elapsed":229,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"40202943-3c1d-4020-c2f0-189694ae6836"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    2.438371\n","dtype: float64"]},"metadata":{},"execution_count":33}],"source":["pop_std = np.std(pop)\n","pop_std"]},{"cell_type":"markdown","source":["Number of observations in our population"],"metadata":{"id":"BL5ChtBe5bCx"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"v2vG77V10zGr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1676716174086,"user_tz":-60,"elapsed":258,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"ffe2c44e-94e3-474d-a12f-dceb9b9b198d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["12500"]},"metadata":{},"execution_count":34}],"source":["len(pop)"]},{"cell_type":"markdown","metadata":{"id":"xx3VAlDD0zGs"},"source":["Let's take a sample from our population:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UHEevCo80zGs"},"outputs":[],"source":["sample = pop.sample(n=50, random_state=4321)"]},{"cell_type":"markdown","source":["Let's plot this sample as a histogram"],"metadata":{"id":"s2WUKrKP5lnv"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"w8K-Wl1M0zGs","colab":{"base_uri":"https://localhost:8080/","height":281},"executionInfo":{"status":"ok","timestamp":1676716321100,"user_tz":-60,"elapsed":572,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"6c1fcdc0-7f3d-499d-e51a-58f941dc79cc"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAWoAAAEICAYAAAB25L6yAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAPJUlEQVR4nO3dfWyd9XnG8euKbV4GAbbFQojgpqsYGkWCIAu6wegGooKB6DShCViR2q1yupUOxDJUunXVuqJKNEJ91UjE61YCYoGoVcpYLaANkQYZIWGQhNKCYE3EGugbpFKJfXzvD5+MLHJ8jpkf37d9vh/Jis85j865bMyVX+7n9xw7IgQAqGtRdgAAwPQoagAojqIGgOIoagAojqIGgOIoagAojqIGgOIoavQE279me73tX9h+xfZV2ZmAbvVnBwDmyNck7ZN0vKQzJH3L9jMRsT03FtCZuTIRC53toyT9VNJpEfFC+75/lrQ7Ij6ZGg7oAqMP9ILflDS+v6TbnpH03qQ8wIxQ1OgFR0t646D7fi5pcUIWYMYoavSCvZKOOei+YyS9mZAFmDGKGr3gBUn9tk8+4L7TJXEiEfMCJxPRE2zfJykkfVSTuz4ekvQ77PrAfMCKGr3iLyQdKWmPpHsl/TkljfmCFTUAFMeKGgCKo6gBoDiKGgCKo6gBoLhG3pRpyZIlsWzZsiaeGgAWpC1btrweEYNTPdZIUS9btkxPPfVUE08NAAuS7VcO9RijDwAojqIGgOIoagAojqIGgOIoagAojqIGgOK62p5n+2VNvsl6S5O/0mi4yVAAgLfNZB/170fE640lAQBMidEHABTX7Yo6JH3bdkhaHRFrDj7A9oikEUkaGhp6x4G8cvXUAVateMfPCQDzWbcr6nMj4kxJF0v6uO3zDj4gItZExHBEDA8OTnm5OgDgHeiqqCNid/vPPZLWSzqryVAAgLd1LGrbR9levP9zSR+Q9FzTwQAAk7qZUR8vab3t/cevjYiHG00FAPhfHYs6Il6SdPocZAEATIHteQBQHEUNAMVR1ABQHEUNAMVR1ABQHEUNAMVR1ABQHEUNAMVR1ABQHEUNAMVR1ABQHEUNAMVR1ABQHEUNAMVR1ABQHEUNAMVR1ABQHEUNAMVR1ABQHEUNAMVR1ABQHEUNAMVR1ABQHEUNAMVR1ABQHEUNAMVR1ABQHEUNAMVR1EjXGn1crdHHs2MAZVHUSNca3aTW6KbsGEBZFDUAFEdRA0BxXRe17T7bW21vaDIQAOD/msmK+lpJO5sKAgCYWn83B9leKukSSTdJur7RROg5A5/lRwqYTldFLemLkm6QtPhQB9gekTQiSUNDQ///ZAc//8rVMzo+Vq2Y9QzdmC5nVqbqfMTh2RGwwMyXvuhWx9GH7Usl7YmILdMdFxFrImI4IoYHBwdnLSAWvtaGR9Ta8Eh2DKCsbmbU50i6zPbLku6TdL7trzeaCj2ltXGzWhs3Z8cAyupY1BFxY0QsjYhlkq6Q9GhEfKjxZAAASeyjBoDyuj2ZKEmKiO9I+k4jSQAAU2JFDQDFzWhFDTThsJtvzI4AlMaKGgCKo6iRbnzdQxpf91B2DKAsihrpJjY/o4nNz2THAMqiqAGgOIoaAIqjqAGgOLbnId/hA9kJgNIoaqQ77B9WZkcASmP0AQDFUdRIN772Gxpf+43sGEBZFDXSTWzboYltO7JjAGVR1ABQHEUNAMVR1ABQHNvzkM7HHJ0dASiNoka6gb/9RHYEoDRGHwBQHEWNdON33q/xO+/PjgGUxegD6SZ2vpgdASiNFTUAFEdRA0BxFDUAFMeMGum85FezIwClUdRIN3DDx7IjAKUx+gCA4ihqpBu/9R6N33pPdgygLEYfSDfx0n9lRwBKY0UNAMVR1ABQHEUNAMV1nFHbPkLSRkmHt49fFxGfaToYeodPPD47AlBaNycT35J0fkTstT0gaZPtf42IJxrOhh4xcO2fZkcASutY1BERkva2bw60P6LJUACAt3U1o7bdZ3ubpD2SRiPiyWZjoZeMfekOjX3pjuwYQFld7aOOiJakM2wfJ2m97dMi4rkDj7E9ImlEkoaGhmY9aBavXD3l/bFqxRwnWbhi94+yIwClzWjXR0T8TNJjki6a4rE1ETEcEcODg4OzlQ8Ael7HorY92F5Jy/aRki6U9HzTwQAAk7oZfZwg6W7bfZos9vsjYkOzsQAA+3Wz6+M/JS2fgyzoUYt+Y+Gc0wCawJsyIV3/x/4kOwJQGpeQA0BxFDXSjd18q8ZuvjU7BlAWow+ki9d/mh0BKI0VNQAUR1EDQHEUNQAUx4wa6Rb91nuyIwClUdRI1/+RP86OAJTG6AMAiqOokW7sc1/R2Oe+kh0DKIvRB9LFG3s7HwT0MFbUAFAcRQ0AxVHUAFAcM2qkW3TGqdkRgNIoaqTrv+qD2RGA0hh9AEBxFDXS7fv0Ku379KrsGEBZjD6Q762x7ARAaayoAaA4ihoAiqOoAaA4ZtRIt+is07MjAKVR1EjXf/kfZEcASmP0AQDFUdRIt++Gz2vfDZ/PjgGURVEDQHEUNQAUR1EDQHEUNQAUx/Y8pOs776zsCEBpFDXS9V16QXYEoLSOow/bJ9l+zPYO29ttXzsXwdA74pdvKX75VnYMoKxuVtTjkv4qIp62vVjSFtujEbGj4WzoEWN/d4sk6bCbb0xOAtTUcUUdEa9GxNPtz9+UtFPSiU0HAwBMmtGM2vYyScslPTnFYyOSRiRpaGhoFqItPF65ekbHx6oVDSXBfHCon5eF+nMx3f8f1b7muf5v0/X2PNtHS3pA0nUR8cbBj0fEmogYjojhwcHB2cwIAD2tq6K2PaDJkr4nIh5sNhIA4EAdRx+2Lel2STsj4pbmI6HX9F14bnYEoLRuZtTnSLpa0rO2t7Xv+1REPNRcLPSSvgt/NzsCUFrHoo6ITZI8B1nQo+Lnb0qSfOzi5CRATbzXB9KN3fRVjd301ewYQFkUNQAUR1EDQHEUNQAUR1EDQHG8zSnS9V1yfnYEoDSKGun63n92dgSgNEYfSBev/Vjx2o+zYwBlUdRIN/aFNRr7wprsGEBZFDUAFEdRA0BxFDUAFEdRA0BxbM9Dur4/uig7AlAaRY10fe9bnh0BKI3RB9JN7HpVE7tezY4BlEVRI934l+/S+Jfvyo4BlEVRA0BxFDUAFEdRA0BxFDUAFMf2PKTrv/Ky7AhAaRQ10i1a/t7sCEBpjD6QbuLFVzTx4ivZMYCyKGqkG1+9VuOr12bHAMqiqAGgOIoaAIqjqAGgOIoaAIpjex7S9X/48uwIQGkUNdItOvXk7AhAaYw+kG5ix/c1seP72TGAsjoWte07bO+x/dxcBELvGb9rncbvWpcdAyirmxX1XZL4pXYAkKRjUUfERkk/mYMsAIApzNrJRNsjkkYkaWhoaLaedtZ55eop749VK+Y4SWeHynooh/oamv6a5+J7uhC+hpm87nyS+TUshO9fN2btZGJErImI4YgYHhwcnK2nBYCex/Y8pOtfcVV2BKA0ihrpFr3nXdkRgNK62Z53r6R/l3SK7V22/6z5WOglE1u3a2Lr9uwYQFkdV9QRceVcBEHvGr/3m5Kkw/hNL8CUuDIRAIqjqAGgOIoaAIqjqAGgOLbnIV3/X344OwJQGkWNdIuWnpAdASiN0QfStZ7YqtYTW7NjAGWxoka61oMPS5L63rc8OQlQEytqACiOogaA4ihqACiOogaA4jiZiHQDfz2SHQEojaJGOg/+enYEoDRGH0jX+u6Tan33yewYQFmsqJGu9a1HJUl97z87OQlQEytqACiOogaA4ihqACiOogaA4jiZiHQDf3NNdgSgNIoa6Xzs4uwIQGmMPpCuNfq4WqOPZ8cAyqKoka41ukmt0U3ZMYCyKGoAKI6iBoDiKGoAKI6iBoDi2J6HdAOfvT47AlAaRY10PuLw7AhAaYw+kK614RG1NjySHQMoi6JGutbGzWpt3JwdAyiLogaA4roqatsX2f6e7R/Y/mTToQAAb+tY1Lb7JH1N0sWSTpV0pe1Tmw4GAJjUzYr6LEk/iIiXImKfpPskfbDZWACA/RwR0x9gXy7pooj4aPv21ZLOjohrDjpuRNJI++Ypkr7X4bWXSHr9nYROQt5mkbdZ5G3WbOR9V0QMTvXArO2jjog1ktZ0e7ztpyJieLZev2nkbRZ5m0XeZjWdt5vRx25JJx1we2n7PgDAHOimqP9D0sm23237MElXSPpms7EAAPt1HH1ExLjtayT9m6Q+SXdExPZZeO2uxyRFkLdZ5G0WeZvVaN6OJxMBALm4MhEAiqOoAaC4lKKeT5ek277D9h7bz2Vn6Ybtk2w/ZnuH7e22r83ONB3bR9jebPuZdt6/z87UDdt9trfa3pCdpRPbL9t+1vY2209l5+nE9nG219l+3vZO27+dnelQbJ/S/r7u/3jD9nWz/jpzPaNuX5L+gqQLJe3S5K6SKyNix5wG6ZLt8yTtlfRPEXFadp5ObJ8g6YSIeNr2YklbJP1h4e+vJR0VEXttD0jaJOnaiHgiOdq0bF8vaVjSMRFxaXae6dh+WdJwRMyLC0hs3y3p8Yi4rb3T7Fci4mfZuTppd9tuTV4Q+MpsPnfGinpeXZIeERsl/SQ7R7ci4tWIeLr9+ZuSdko6MTfVocWkve2bA+2P0me4bS+VdImk27KzLDS2j5V0nqTbJSki9s2Hkm67QNKLs13SUk5Rnyjphwfc3qXCRTKf2V4mabmkJ3OTTK89RtgmaY+k0YgonVfSFyXdIGkiO0iXQtK3bW9pv9VDZe+W9JqkO9ujpdtsH5UdqktXSLq3iSfmZOICZftoSQ9Iui4i3sjOM52IaEXEGZq86vUs22VHTLYvlbQnIrZkZ5mBcyPiTE2+A+bH2+O8qvolnSnpHyNiuaRfSCp9HkuS2iOayyT9SxPPn1HUXJLesPas9wFJ90TEg9l5utX+J+5jki7KzjKNcyRd1p773ifpfNtfz400vYjY3f5zj6T1mhw/VrVL0q4D/lW1TpPFXd3Fkp6OiB818eQZRc0l6Q1qn5y7XdLOiLglO08ntgdtH9f+/EhNnmR+PjfVoUXEjRGxNCKWafJn99GI+FByrEOyfVT7pLLaI4QPSCq7gyki/lvSD22f0r7rAkklT4Qf5Eo1NPaQEn4LeYOXpDfC9r2Sfk/SEtu7JH0mIm7PTTWtcyRdLenZ9txXkj4VEQ8lZprOCZLubp8xXyTp/ogov+VtHjle0vrJv7/VL2ltRDycG6mjT0i6p72Qe0nSR5LzTKv9F+CFklY09hpcQg4AtXEyEQCKo6gBoDiKGgCKo6gBoDiKGgCKo6gBoDiKGgCK+x/Q8bhThcDxBgAAAABJRU5ErkJggg==\n"},"metadata":{"needs_background":"light"}}],"source":["# Histogram\n","sample.hist(bins=50, grid=False, color=\"#007398\");\n","\n","# Vertical red line representing the sample mean\n","plt.axvline(float(sample.mean()), linestyle=\"--\", ymax=0.8, color=\"#f8485e\");"]},{"cell_type":"markdown","metadata":{"id":"ZBzSaVQ70zGs"},"source":["The mean of the sample is similar but not equal to the mean of the population."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"z_aXgtrH0zGs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1676716396386,"user_tz":-60,"elapsed":250,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"7eaa361d-2c88-4463-c513-5b0307074058"},"outputs":[{"output_type":"stream","name":"stdout","text":["sample mean: 2.994229904318285\n","population mean: 3.3871463523736334\n"]}],"source":["# Sample mean\n","print('sample mean:', float(np.mean(sample)))\n","print('population mean:', float(pop_mean))"]},{"cell_type":"code","source":["type(sample)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IT1biLbWFeke","executionInfo":{"status":"ok","timestamp":1676716411669,"user_tz":-60,"elapsed":246,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"31d1576e-69eb-44b9-8749-f05cb3398198"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["pandas.core.frame.DataFrame"]},"metadata":{},"execution_count":40}]},{"cell_type":"markdown","metadata":{"id":"9SGvJfWA0zGs"},"source":["Let's recap what we know about the sample mean in relation to the population mean\n","\n","According to the central limit theorem, the sample means for any population will be distributed roughly as a normal distribution around the population mean:\n","* Most of the sample means will be close to the population mean. \n","* The sample means will be distributed, approximately, as a normal distribution around the population mean. \n","* All of this will be true no matter what the distribution of the population looks like. The population from which the samples are being drawn does not have to have a normal distribution in order for the sample means to be distributed normally.\n","\n","Some general rules about the central limit theorem to remember:\n","* If the population has extreme outliers and the samples are very small, the CLT may not function.\n","* We may have a population with a higly skewed distribution, the distribution of the sample means will not be skewed.\n","* The larger the number of the samples, the more closely the distribution will approximate the normal distribution."]},{"cell_type":"markdown","metadata":{"id":"1f9MEqvb0zGt"},"source":["### Sampling distributions"]},{"cell_type":"markdown","metadata":{"id":"liBj8l2O0zGt"},"source":["Now, we take 100, 1000 or 10000 samples, each one of size 50"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ClAMczNs0zGt"},"outputs":[],"source":["number_of_samples = 10000\n","sample_size = 50\n","samples = []\n","\n","for number in range(number_of_samples): \n","    simple_random_sample = pop.sample(n= sample_size, \n","                                      replace=True\n","                                     )\n","    samples.append([simple_random_sample])"]},{"cell_type":"markdown","metadata":{"id":"mfew070z0zGt"},"source":["Let's make a list of the mean for each sample:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Zx2b4VGq0zGu"},"outputs":[],"source":["sample_means = []\n","\n","for s in samples:\n","    sample_means.append(np.mean(s))"]},{"cell_type":"markdown","metadata":{"id":"x8GLjHwB0zGu"},"source":["The result is the **sampling distribution** of the **sample means**:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zMlU7RKW0zGu","colab":{"base_uri":"https://localhost:8080/","height":592},"executionInfo":{"status":"ok","timestamp":1676717552484,"user_tz":-60,"elapsed":730,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"cbba369a-e4b5-4960-a092-81c44d09a2db"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x720 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# Creating a series of the means\n","sampling_dist_sample_means = pd.Series(sample_means)\n","# Finding the mean of the Series\n","sdsm_mean = float(sampling_dist_sample_means.mean())\n","# Finding the Standard Error\n","se = float(sampling_dist_sample_means.std())\n","                \n","# Plotting the Histogram\n","sampling_dist_sample_means.hist(bins=50, grid=False, figsize=(20,10), color=\"#f8485e\");\n","\n","# Plotting the vertical lines\n","plt.axvline(sdsm_mean, linestyle=\"--\",linewidth=3.5, color=\"#EBEBEB\");\n","plt.axvline(sdsm_mean+se, linestyle=\"--\",linewidth=3.5, color=\"#595C5D\");\n","plt.axvline(sdsm_mean-se, linestyle=\"--\",linewidth=3.5, color=\"#595C5D\");"]},{"cell_type":"markdown","metadata":{"id":"q28OnLp80zGu"},"source":["We had a population of 12.500 elements, which had a weird bimodal distribution. We took 10.000 samples, each sample had size of 50. We then looked at the mean of each of the 10.000 samples, giving us 10.000 sample means. This is called a sampling distribution and it approximates the normal distribution.\n","\n","The larger the sample size and the more samples taken, the more closely the distribution of sample means will approximate the normal curve. As a rule of thumb, the sample size must at least 30 for the central limit theorem to hold true.\n","> **Note:** a larger sample is less likely to be affected by a random variation."]},{"cell_type":"markdown","metadata":{"id":"XnEFipgL0zGv"},"source":["The mean of the sampling distribution of the sample means should be pretty close to the true mean of the population:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Qv5_yb4X0zGv","executionInfo":{"status":"ok","timestamp":1676719827546,"user_tz":-60,"elapsed":223,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"6fdffe55-d63b-4bac-a059-db6d39b8e3b1"},"outputs":[{"output_type":"stream","name":"stdout","text":["The difference between the population mean and the mean of the sampling distribution is 0.0051\n"]}],"source":["difference = pop_mean - np.mean(sampling_dist_sample_means)\n","print(f\"The difference between the population mean and the mean of the sampling distribution is {round(difference[0], 4)}\")"]},{"cell_type":"markdown","source":["### Standard error"],"metadata":{"id":"iRB05LTAPxMV"}},{"cell_type":"markdown","metadata":{"id":"WdrtyCYQ0zGv"},"source":["We know that in a normal distribution, 95% of the values fall within 2 standard deviations of the mean. We will check that. But first, a terminology alert:\n","\n","> The *standard deviation of the sampling distribution of the sample means* is called **standard error of the mean** or simply **standard error**.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"DBZpGjqM0zGw"},"source":["What is the difference between the standard error and the standard deviation?\n","\n","* The standard deviation measures the dispersion in the population or sample.\n","* The standard error measures the dispersion of the sampling distribution of sample means.\n","\n","Let's look at the standard error for the samples taken from our popultaion"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lLGhZIWe0zGv","executionInfo":{"status":"ok","timestamp":1676717799622,"user_tz":-60,"elapsed":545,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"2fdcc9e5-075c-4d69-a028-e1d0a030cbb0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.3437183759728205"]},"metadata":{},"execution_count":48}],"source":["standard_error = np.std(sampling_dist_sample_means)\n","standard_error"]},{"cell_type":"markdown","source":["* We know that the standard error is one standard deviation for our distribution of the sample means. \n","* We know that 95% of values are contained within 2 standard deviations of the mean of our distribution of sample means.\n","* We can therefore conclude that if another sample has a mean that is more than 2 standard deviations away from the mean of our distribution of sample means, it is highly unlikely that they come from the same population - there's less than a 5% chance that they're from the same population"],"metadata":{"id":"qaMvMgVLQ9Ae"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"iX1EVJx50zGw","executionInfo":{"status":"ok","timestamp":1676718008107,"user_tz":-60,"elapsed":246,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"328c9613-a522-46dc-e0a2-acea38c9b1a1"},"outputs":[{"output_type":"stream","name":"stdout","text":["2.7 - 4.07\n"]}],"source":["# mean of distribution of sample means\n","mean_sdsm = np.mean(sampling_dist_sample_means)\n","\n","lower_bound = mean_sdsm - 2*standard_error\n","upper_bound = mean_sdsm + 2*standard_error\n","\n","print(round(lower_bound, 2), \"-\", round(upper_bound, 2))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vK0FR2LH0zGw","executionInfo":{"status":"ok","timestamp":1676718108417,"user_tz":-60,"elapsed":323,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"74937fe9-84df-4b9c-e59a-e8fc37e87ee4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Percentage of sample means within 2 standard errors of the mean = 95.44\n"]}],"source":["count = 0\n","for i in sample_means:\n","    if i > lower_bound and i < upper_bound:\n","        count +=1\n","print(f\"Percentage of sample means within 2 standard errors of the mean = { count/len(sample_means)*100 }\")"]},{"cell_type":"markdown","metadata":{"id":"i5ExludR0zGw"},"source":["Another property the standard error is that it can be estimated by taking the standard deviation of the population and dividing it by the square root of the sample size.\n","\n","Let's see how this checks out with our data:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"elXweibW0zGw","executionInfo":{"status":"ok","timestamp":1676718186275,"user_tz":-60,"elapsed":240,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"eba8091c-4b28-4106-a998-b39403a8915c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["50"]},"metadata":{},"execution_count":51}],"source":["sample_size"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RY98Oj8B0zGw","executionInfo":{"status":"ok","timestamp":1676718287066,"user_tz":-60,"elapsed":236,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"df739c7e-78d7-4d45-af2b-e551cbe401cc"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.3437183759728205"]},"metadata":{},"execution_count":52}],"source":["standard_error"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HsXr6fz_0zGw","executionInfo":{"status":"ok","timestamp":1676718316189,"user_tz":-60,"elapsed":396,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"dc66e43e-be74-4c10-afe0-799acdd2b044"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    2.438371\n","dtype: float64"]},"metadata":{},"execution_count":53}],"source":["# standard deviation of the population\n","pop_std"]},{"cell_type":"markdown","metadata":{"id":"z353iTjS0zGw"},"source":["The formula of standard error is: \n","\n","$$\\sigma_{M} = \\frac{\\sigma}{\\sqrt(n)}$$\n","\n","* $\\sigma$ is the standard deviation of the population from which sample is drawn.\n","* $n$ is the size of the sample."]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":true,"id":"eGqmlGju0zGw","executionInfo":{"status":"ok","timestamp":1676718340367,"user_tz":-60,"elapsed":275,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"a70725c3-a7fc-414e-94ac-f98214d559c3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    0.344838\n","dtype: float64"]},"metadata":{},"execution_count":54}],"source":["# population standard deviation / square root of population size\n","pop_std/np.sqrt(sample_size)"]},{"cell_type":"markdown","source":["When we don't have access the population, we estimate the standard error of the mean by taking the standard deviation of the sample:"],"metadata":{"id":"_Dc_073dXI3N"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"3YM5W3kC0zGx","executionInfo":{"status":"ok","timestamp":1676718476183,"user_tz":-60,"elapsed":223,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"dd2388d9-d9ef-4f80-b5c7-e4e0ab93cee1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    0.364068\n","dtype: float64"]},"metadata":{},"execution_count":55}],"source":["# sample standard deviation / square root of population size\n","sample.std()/np.sqrt(sample_size)"]},{"cell_type":"markdown","metadata":{"id":"Zy1n0RB40zGx"},"source":["In the major part of the cases, we don't know the population standard deviation, so for large samples, we can assume that the standard deviation of the sample is reasonably close to the standard deviation of the population."]},{"cell_type":"markdown","metadata":{"id":"MQIZRPJN0zGx"},"source":["#### **Exercise 2:** \n","Before moving on, repeat the experiment (located under the header `Sampling distributions`) changing a few parameters and note down what happens in the following cases:\n","\n","* With diferent sample sizes (both smaller and greater)\n","* With fewer or more samples.\n","* Adding some extreme outliers to the population.\n","* Sampling without replacement."]},{"cell_type":"code","source":["#sample size = 1000\n","number_of_samples = 1000\n","sample_size = 50\n","samples = []\n","\n","for number in range(number_of_samples): \n","    simple_random_sample = pop.sample(n= sample_size, \n","                                      replace=False\n","                                     )\n","    samples.append([simple_random_sample])\n"],"metadata":{"id":"lbQuiNMJ91TP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#calculate sample means\n","sample_means = []\n","\n","for s in samples:\n","    sample_means.append(np.mean(s))\n"],"metadata":{"id":"LRaIzZGTO9-j"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sampling_dist_sample_means = pd.Series(sample_means)\n","# Finding the mean of the Series\n","sdsm_mean = float(sampling_dist_sample_means.mean())\n","# Finding the Standard Error\n","se = float(sampling_dist_sample_means.std())\n","                \n","# Plotting the Histogram\n","sampling_dist_sample_means.hist(bins=50, grid=False, figsize=(20,10), color=\"#f8485e\");\n","\n","# Plotting the vertical lines\n","plt.axvline(sdsm_mean, linestyle=\"--\",linewidth=3.5, color=\"#EBEBEB\");\n","plt.axvline(sdsm_mean+se, linestyle=\"--\",linewidth=3.5, color=\"#595C5D\");\n","plt.axvline(sdsm_mean-se, linestyle=\"--\",linewidth=3.5, color=\"#595C5D\");"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":592},"id":"HgM84E9gPJwY","executionInfo":{"status":"ok","timestamp":1676719074803,"user_tz":-60,"elapsed":702,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"cc7fe1a2-2c20-45ce-8811-c7aae3655175"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x720 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["#percentage of values lie within 1 standard deviation from samples_mean\n","\n","sigma_negative = sdsm_mean - se\n","sigma_positive = sdsm_mean + se\n","\n","count = 0\n","for i in sample_means:\n","  if i > sigma_negative and i< sigma_positive:\n","    count = count +1\n","\n","print(f\"Percentage of sample means within 1 standard errors of the mean = { count/len(sample_means)*100 }\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HzUr41BUPxKB","executionInfo":{"status":"ok","timestamp":1676719686189,"user_tz":-60,"elapsed":212,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"a77b007c-557b-4ac5-c4f3-3ac78c11f7c4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Percentage of sample means within 1 standard errors of the mean = 68.4\n"]}]},{"cell_type":"code","source":["#percentage of values lie within 1 standard deviation from samples_mean\n","sigma_negative2 = sdsm_mean - 2*se\n","sigma_positive2 = sdsm_mean + 2* se\n","\n","count = 0\n","for i in sample_means:\n","  if i > sigma_negative2 and i< sigma_positive2:\n","    count = count +1\n","\n","print(f\"Percentage of sample means within 1 standard errors of the mean = { count/len(sample_means)*100 }\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EvfAIL5ISB05","executionInfo":{"status":"ok","timestamp":1676719739628,"user_tz":-60,"elapsed":247,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"69f3ee77-47e2-492a-e563-cb1808c3fe10"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Percentage of sample means within 1 standard errors of the mean = 94.8\n"]}]},{"cell_type":"code","source":["# difference between population meand and samples_mean\n","\n","diff = pop_mean - sdsm_mean\n","diff"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pbltBykJS4Ev","executionInfo":{"status":"ok","timestamp":1676719965301,"user_tz":-60,"elapsed":12,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"119bea5b-e89a-4446-d401-a9990d89797d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    0.005106\n","dtype: float64"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","source":["#Most of the sample means will be close to the population mean\n","#The mean of the sampling distribution of the sample means should be pretty close to the true mean of the population:\n","#observe below values"],"metadata":{"id":"YcG-vvVPTViq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pop_mean"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ChQhJbU6TFyn","executionInfo":{"status":"ok","timestamp":1676719978015,"user_tz":-60,"elapsed":387,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"0c85789e-a1a9-4fc1-dee0-8b0c0daedc80"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    3.387146\n","dtype: float64"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","source":["sdsm_mean"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K4RBTbzATIG-","executionInfo":{"status":"ok","timestamp":1676719988776,"user_tz":-60,"elapsed":383,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"bb1d34f8-e2ad-4adc-8cae-9a35ec135534"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3.3820401568547886"]},"metadata":{},"execution_count":68}]},{"cell_type":"code","source":["sample_means[700]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ly5n78gNTOOm","executionInfo":{"status":"ok","timestamp":1676720022118,"user_tz":-60,"elapsed":257,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"711d1210-4a55-4b53-953e-3e5989c0bf75"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3.1947138423518107"]},"metadata":{},"execution_count":69}]},{"cell_type":"markdown","metadata":{"id":"WIoJEKaP0zGx"},"source":["Summarising the main ideas: \n","\n","* If you draw large, random samples from any population, the means of those samples will be distributed normally around the population mean (regardless of what the distribution of the underlying population looks like).\n","* Most sample means will lie reasonably close to the poulation mean; the standard error is what defines \"reasonably close\".\n","* The central limit theorem tells us the probability that a sample mean will lie within a certain distance of the population mean. It is relatively unlikely that a sample mean willl lie more than two standard errors from the population mean, and extremely unlikely that it will lie three or more standard errors from the population mean. \n","* The less likely it is that an outcome has been observed by change, the more confidence we can in surmising that some other factor is in play. "]},{"cell_type":"markdown","metadata":{"id":"LrTtpCS40zGx"},"source":["## Squirrels example\n","\n","Let's assume that the population values from earlier represent the weights of squirrels. Now, in reality, if we took a sample of squirrels we wouldn't know the mean and the standard deviation of the population - this is normal. We simply go to the forest, take a random sample of 50 squirrels and register their weight:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"r4zDFJy60zGx","colab":{"base_uri":"https://localhost:8080/","height":281},"executionInfo":{"status":"ok","timestamp":1676720629344,"user_tz":-60,"elapsed":244,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"a77a6f98-5dd1-4bbb-813e-3adcca1eab95"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["squirrels = pop.sample(50, random_state=1990)\n","\n","squirrels.hist();"]},{"cell_type":"markdown","metadata":{"id":"XUmJPFqV0zGx"},"source":["We wonder if the mean of the weights of the squirrels is close to the 'true' mean of the population (which we can't measure)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OP1yO8yz0zGy","executionInfo":{"status":"ok","timestamp":1676720632966,"user_tz":-60,"elapsed":14,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"038f439c-059a-43e8-c04b-add7b9bb6837"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["3.3492958902381855"]},"metadata":{},"execution_count":75}],"source":["# mean of our sample\n","mean_squirrels = float(squirrels.mean())\n","mean_squirrels"]},{"cell_type":"markdown","metadata":{"id":"wQ7Z1tMm0zGy"},"source":["The standard error of the mean is an estimate of how far the sample mean is likely to be from the population mean.\n","\n","It is an estimate of the standard deviation of the sampling distribution of the sample means, which, as we've seen, follows a normal ditribution."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zDWWvxn_0zGy","executionInfo":{"status":"ok","timestamp":1676720635514,"user_tz":-60,"elapsed":209,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0dbf6c7a-b4b1-4ed8-c1b7-39a561ed962b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.34511169176753176"]},"metadata":{},"execution_count":76}],"source":["# standard error of the mean\n","sem_squirrels = float(squirrels.std()/np.sqrt(len(squirrels)))\n","sem_squirrels"]},{"cell_type":"markdown","source":["We can also calculate the standard error using scipy"],"metadata":{"id":"wcB9FyytZW4b"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"LjrCQJuO0zGy","executionInfo":{"status":"ok","timestamp":1676720662970,"user_tz":-60,"elapsed":460,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"3437a581-ae74-43ab-ea96-83336370f445"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.34511169])"]},"metadata":{},"execution_count":77}],"source":["stats.sem(squirrels)"]},{"cell_type":"markdown","metadata":{"id":"SttG17TR0zGy"},"source":["We know that no matter the distribution of our sample or the population, the sampling distribution of the sample means is normal (Central Limit Theorem).\n","\n","Knowing that, we can use the properties of the normal distribution to gain information about our sample and how much it might differ from the true population.\n","\n","We have:\n","\n","1. The mean of the sample.\n","2. An estimation of the standard error.\n","\n","With this two elements and knowing the CLT, we can simulate a sampling distribution of sample means built around the mean of our sample.\n","\n","This sampling distribution we will simulate will be, of course, normal. We can plot it and draw the lines within 2 Standard Errors above and below the mean, representing the interval where 95% of the observations fall:"]},{"cell_type":"code","source":["# generating a normal distribution\n","sampling_dist_squirrels = stats.norm.rvs(loc=mean_squirrels, # The mean of the sample.\n","                                         scale=sem_squirrels, # An estimation of the standard error.\n","                                         size=100000,\n","                                         random_state=123\n","                                         )\n","\n","norm_dist = pd.Series(sampling_dist_squirrels)\n","\n","norm_dist.hist(bins=30, figsize=(14, 8))\n","\n","plt.axvline(mean_squirrels-sem_squirrels*2, color = 'r', linestyle=\"--\")\n","plt.axvline(mean_squirrels+sem_squirrels*2, color = 'r', linestyle=\"--\");"],"metadata":{"id":"JEi0BB25h5n5","executionInfo":{"status":"ok","timestamp":1676721373473,"user_tz":-60,"elapsed":672,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"colab":{"base_uri":"https://localhost:8080/","height":483},"outputId":"cf06cc83-06c2-422d-abf6-262c9935c278"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1008x576 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["What does this distribution and this interval tell us?\n","\n","If we took many samples, and in each sample we drew this interval with the red dotted lines, 95% of the time the mean of any sample would fall inside of the interval. 5% of the time, the mean would fall outside (2.5% in each direction).\n","\n","This is why we call this the 95% confidence interval. A **confidence interval** is a 'plausible range of values' for a population parameter (in this case, the mean).\n","\n","Let's calculate the upper and lower bounds of this interval:"],"metadata":{"id":"lXLIHJpSh1eF"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"TVkP9cq10zGy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1676721842843,"user_tz":-60,"elapsed":439,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"f32584bc-16c1-43f3-e0bf-4c548be98e83"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    4.039519\n","dtype: float64"]},"metadata":{},"execution_count":79}],"source":["# upper bound of the confidence interval\n","np.mean(squirrels) + stats.sem(squirrels)*2\n","\n","# if you want the results to match with the manual calculation below,\n","# change the \"2\" for a \"1.96\""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LHxMUQzQ0zGy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1676721845504,"user_tz":-60,"elapsed":210,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"835d09df-e42d-47fa-fc05-09000f0c13fa"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    2.659073\n","dtype: float64"]},"metadata":{},"execution_count":80}],"source":["# lower bound of the confidence interval\n","np.mean(squirrels) - stats.sem(squirrels)*2\n","\n","# if you want the results to match with the manual calculation below,\n","# change the \"2\" for a \"1.96\""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kHq5RXD40zGy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1676721871503,"user_tz":-60,"elapsed":11,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"c2e9326e-5926-461b-bfe0-7de909e9f3c9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([2.6728894]), array([4.02570238]))"]},"metadata":{},"execution_count":81}],"source":["# using scipy to calculate the confidence interval:\n","stats.norm.interval(alpha=0.95, # the confidence level\n","                 loc=np.mean(squirrels), # mean of our sample\n","                 scale=stats.sem(squirrels)) # standard error of the mean"]},{"cell_type":"markdown","metadata":{"id":"gUZEvB0z0zGz"},"source":["We have made some estimations that might be imperfect, for example when calculating the Standard Error. And our sample is not really big (only 50 squirrels). If we want an extra degree of confidence or, in other words, a more conservative estimate of the confidence interval, we can use a t-distribution instead of a normal distribution.\n","\n","A t distribution is 'flatter' and has 'fat tails' for small populations, and is indistinguishable from a normal distribution for bigger populations.\n","\n"]},{"cell_type":"code","source":["# generating a t distribution\n","sampling_t_dist_squirrels = stats.t.rvs(loc=mean_squirrels, # The mean of the sample.\n","                                        scale=sem_squirrels, # An estimation of the standard error.\n","                                        df=len(squirrels), # Our sample size\n","                                        size=100000,\n","                                        random_state=123\n","                                         )\n","\n","sampling_t_dist_squirrels = pd.Series(sampling_t_dist_squirrels)\n","\n","sampling_t_dist_squirrels.hist(bins=30, figsize=(14, 8));"],"metadata":{"id":"ZsWVzwV8nL62","colab":{"base_uri":"https://localhost:8080/","height":483},"executionInfo":{"status":"ok","timestamp":1676722523329,"user_tz":-60,"elapsed":618,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"7fca8cf4-8f7a-491a-89f0-ea1681fe014c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1008x576 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["The confidence interval is slightly thinner if we use a normal distribution:"],"metadata":{"id":"a_i52a6qnMxF"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"iamLy3JL0zGy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1676722076727,"user_tz":-60,"elapsed":231,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"6de23979-1fe2-46f6-a87e-8e31264afe10"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([2.65576798]), array([4.0428238]))"]},"metadata":{},"execution_count":82}],"source":["# using a t distribution:\n","t_interval = stats.t.interval(\n","            0.95, # the confidence level\n","            len(squirrels)-1, # degrees of freedom = sample size - 1\n","            loc=np.mean(squirrels), # mean of our sample\n","            scale=stats.sem(squirrels) # standard error of the mean\n","            )\n","\n","t_interval"]},{"cell_type":"markdown","source":["### **Exercise 3:**\n","\n","Did the true mean really fall within the 95% confidence interval?"],"metadata":{"id":"3Ujg7PSRmnj1"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"XeV6AvfA0zGz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1676723199883,"user_tz":-60,"elapsed":223,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"7330327a-53a4-4f8a-9376-8c4d57a7a41a"},"outputs":[{"output_type":"stream","name":"stdout","text":["95.19% falls within two standard deviation of the mean\n"]}],"source":["#t_dist falls within 2 standard deviations of the mean\n","sigma_negative2 = mean_squirrels - 2*sem_squirrels\n","sigma_positive2 = mean_squirrels + 2*sem_squirrels\n","sigma_2standard_area = len(sampling_t_dist_squirrels[(sampling_t_dist_squirrels > sigma_negative2) \n","                                   &(sampling_t_dist_squirrels < sigma_positive2)])\n","\n","out_2_std = sigma_2standard_area / len(sampling_t_dist_squirrels)\n","\n","print(f\"{round(out_2_std * 100, 2)}% falls within two standard deviation of the mean\")"]},{"cell_type":"code","source":["#t_dist falls within 1 standard deviations of the mean\n","sigma_negative = mean_squirrels - sem_squirrels\n","sigma_positive = mean_squirrels + sem_squirrels\n","sigma_1_standard_area = len(sampling_t_dist_squirrels[(sampling_t_dist_squirrels > sigma_negative) \n","                                   &(sampling_t_dist_squirrels < sigma_positive)])\n","\n","out_1_std = sigma_1_standard_area / len(sampling_t_dist_squirrels)\n","\n","print(f\"{round(out_1_std * 100, 2)}% falls within one standard deviation of the mean\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pqBX12njc8rC","executionInfo":{"status":"ok","timestamp":1676723197869,"user_tz":-60,"elapsed":7,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"ba2c3559-ce7c-44e2-c098-768aa23732bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["67.9% falls within one standard deviation of the mean\n"]}]},{"cell_type":"code","source":["#t_dist falls outside 2 standard deviations of the mean\n","sigma_negative2 = mean_squirrels - 2*sem_squirrels\n","sigma_positive2 = mean_squirrels + 2*sem_squirrels\n","sigma_2standard_area = len(sampling_t_dist_squirrels[(sampling_t_dist_squirrels < sigma_negative2) \n","                                   |(sampling_t_dist_squirrels > sigma_positive2)])\n","\n","out_2_std = sigma_2standard_area / len(sampling_t_dist_squirrels)\n","\n","print(f\"{round(out_2_std * 100, 2)}% falls outside two standard deviation of the mean\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yoRpVmjteNPX","executionInfo":{"status":"ok","timestamp":1676723205880,"user_tz":-60,"elapsed":236,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"18b7a310-8509-4ceb-c965-d9c7f37f972b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4.81% falls outside two standard deviation of the mean\n"]}]},{"cell_type":"markdown","source":["Probably yes, but beware: by definition, 5% of the time it will not!\n","\n","### **Exercise 4**: \n","Can you run the experiment 10,000 times and prove it?"],"metadata":{"id":"Xyci-4zZ0zGz"}},{"cell_type":"code","source":["# generating a t distribution\n","sampling_t_dist_squirrels = stats.t.rvs(loc=mean_squirrels, # The mean of the sample.\n","                                        scale=sem_squirrels, # An estimation of the standard error.\n","                                        df=len(squirrels), # Our sample size\n","                                        size=10000,\n","                                        random_state=123\n","                                         )\n","\n","sampling_t_dist_squirrels = pd.Series(sampling_t_dist_squirrels)\n","\n","sampling_t_dist_squirrels.hist(bins=30, figsize=(14, 8));"],"metadata":{"id":"vlEwGVWPmzcG","colab":{"base_uri":"https://localhost:8080/","height":483},"executionInfo":{"status":"ok","timestamp":1676723145289,"user_tz":-60,"elapsed":723,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"91dbbd20-7ccb-4ceb-e939-b652e738643a"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1008x576 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["#t_dist falls within 2 standard deviations of the mean\n","sigma_negative2 = mean_squirrels - 2*sem_squirrels\n","sigma_positive2 = mean_squirrels + 2*sem_squirrels\n","sigma_2standard_area = len(sampling_t_dist_squirrels[(sampling_t_dist_squirrels > sigma_negative2) \n","                                   &(sampling_t_dist_squirrels < sigma_positive2)])\n","\n","out_2_std = sigma_2standard_area / len(sampling_t_dist_squirrels)\n","\n","print(f\"{round(out_2_std * 100, 2)}% falls within two standard deviation of the mean\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F70DczVRfNdJ","executionInfo":{"status":"ok","timestamp":1676723214909,"user_tz":-60,"elapsed":11,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"a1b1d5e0-a860-46e4-c516-29fae35ddbe2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["95.19% falls within two standard deviation of the mean\n"]}]},{"cell_type":"code","source":["#t_dist falls outside 2 standard deviations of the mean\n","sigma_negative2 = mean_squirrels - 2*sem_squirrels\n","sigma_positive2 = mean_squirrels + 2*sem_squirrels\n","sigma_2standard_area = len(sampling_t_dist_squirrels[(sampling_t_dist_squirrels < sigma_negative2) \n","                                   |(sampling_t_dist_squirrels > sigma_positive2)])\n","\n","out_2_std = sigma_2standard_area / len(sampling_t_dist_squirrels)\n","\n","print(f\"{round(out_2_std * 100, 2)}% falls outside two standard deviation of the mean\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QKkOp1zRfeYm","executionInfo":{"status":"ok","timestamp":1676723229355,"user_tz":-60,"elapsed":317,"user":{"displayName":"kalava sivalavanya","userId":"05755290286565672160"}},"outputId":"8f5ce069-19cd-4e58-bf15-5a9c34dbab1c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4.81% falls outside two standard deviation of the mean\n"]}]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.7"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false},"colab":{"provenance":[{"file_id":"1jcR3lE9QmETlaDTJrd3jDiKOxvKu9ypp","timestamp":1676715412937},{"file_id":"1_LlsQX5yJUA_wL_sCra02FejBgX_wPBf","timestamp":1665674983750},{"file_id":"1ozfRyp3XVl2A91JjR1lE2GJPu0aP5kKk","timestamp":1665654807117}]}},"nbformat":4,"nbformat_minor":0}